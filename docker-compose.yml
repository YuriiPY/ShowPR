version: "3.9"

networks:
  ${NETWORK_NAME}:

volumes:
  front-end_public:
  postgres_data:
  certbot-etc:
  certbot-var:

services:
  nginx:
    image: nginx:stable-alpine
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/html:/var/www/certbot
      - front-end_public:/usr/share/nginx/html/front-public
    depends_on:
      - backend
      - frontend
      - tg_bot
    networks:
      - ${NETWORK_NAME}

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/html:/var/www/certbot
    entrypoint: >
      sh -c "certbot certonly --webroot
      --webroot-path=/var/www/certbot
      --email ${EMAIL}
      --agree-tos
      --no-eff-email
      -d ${DOMAIN} -d www.${DOMAIN}"

  certbot-renew:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/html:/var/www/certbot
    entrypoint: >
      sh -c "certbot renew --webroot --webroot-path=/var/www/certbot && nginx -s reload"
    depends_on:
      - nginx

  postgres:
    image: postgres:10
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - ${NETWORK_NAME}

  backend:
    build:
      context: ./back-end
      dockerfile: Dockerfile
    env_file:
      - ./back-end/.env
    ports:
      - "${BACKEND_PORT}:8000"
    networks:
      - ${NETWORK_NAME}

  frontend:
    build:
      context: ./front-end
      dockerfile: Dockerfile
    volumes:
      - front-end_public:/app/public
    ports:
      - "${FRONTEND_PORT}:3000"
    networks:
      - ${NETWORK_NAME}
    env_file:
      - ./front-end/.env.local

  tg_bot:
    build:
      context: ./tg_bot
      dockerfile: Dockerfile
    env_file:
      - ./tg_bot/.env
    ports:
      - "${TGBOT_PORT}:8080"
    networks:
      - ${NETWORK_NAME}
    volumes:
      - ./logs:/app/logs